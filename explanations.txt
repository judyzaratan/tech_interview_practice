Question 1

Time complexity: O(len(s)) It will need to iterate through the length of s, or t
Space complexity: 1 Dictionary holding character counts

The function stores a dictionary of character counts for string t.  Utilizing
this string t dictionary, it compares against sequences of t-length substring s.
It continues in sequence parsing out substrings in s and compares against the
dictionary.   This complexity is O(len(s)) because it at most has to iterate
through the whole string and do a comparison against a dictionary.

A subfunction was created for simplicity to handles two dictionaries and compare
them if they have same contents.

Question 2

Time complexity: O(n) Space complexity: n

This function utilizes Manacher's algorithm to solve finding the largest
palindromic substring in a string.

To avoid the complication of computing between even- and odd-length strings, the
input string will be converted to (2n+1) length, which will ensure a consistent
odd-length string to work with.

The way it works is that it utilizes boundaries of a known palindrome. We keep
an array of palindromic lengths at each index representing a placement of the
character in the transformed input string. We have pointers to keep track of
what we need to compare or help with length calculation.   There is a center, i,
and radius.  Based on the radius value and i (element we need to compute the
length) and i mirrored to the left of the center, we can determine the minimum
length at i.  We can keep utilizing i until it reaches a bound where radius is.
After reaching this bound, we will need to recenter our palindrome and continue
length calculation there. This will cut down runtime because we are building
using a information based on previous computations. Also, there is O(n) since
the steps needed to expand the range with i can take no longer than n steps.

Reference
http://www.zrzahid.com/longest-palindromic-substring-in-linear-time/
http://articles.leetcode.com/longest-palindromic-substring-part-ii/

Question 3

Time complexity: O(n^2) Space complexity: n

This algorithm uses Prim's algorithm.  In the function it has a storage of
visited vertices and randomly selects one vertex to kick off the process. In
each vertex, the edges connected to that vertex are inspected and the lowest
weighted edge is stored and selected as the next vertex to visit. The visited
matrix is again iterated upon until all vertices have been visited.

This is is O(n^2) complexity because each vertex has to compare and look up
against each vertex to see if the edge weight is minimum and has been visited.

Question 4

Time complexity: O(log n) Space complexity: O(log n)

The function has a sub-function that finds the path of one node input to root.
It continues looping until there are no more children from root or it encounters
the node.  While looping, it stores the nodes it has visited along the way. The
search is cut in half, because a comparison is done with the visited node and
the node it is searching for.  This results to the O(log (n)) time complexity.
After the paths of the two nodes are found, another loop is done to compare each
element from the array to find a common node that is along the path.  If a
common node is found, the function returns the common node.  If not, then it
returns the root because the root is the always a common ancestor.

Question 5

Time complexity: O(n) Space complexity: 1

There is no additional data structures needed, but pointers are used to find mth
element from the end.  First, the head pointer moved m places from the start of
the linked list.  Then the tail pointer is pointed at the start of the linked
list. A loop is run until the head pointer reaches to the end of the linked
list.  The tail pointer is also moved up along with the head pointer.  Since the
distance between the head and tail pointer is m, and the head pointer is
pointing to the end of the list, tail pointer is now pointing at the mth element
from the end of the linked list.
