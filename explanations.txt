Question 1

Time complexity: O(n)
It will need to iterate through the length of s, or t
Space complexity: 1
Temporary variable storage holding string

The function iterates through the complete s string and takes each character and does a check.
It checks if the character existing in s, is also in t and removes that character in t.
It then checks if it can possibly break out of the loop if we have encountered all characters in t.

The variable temp which serves as a counter to see if all of the characters have been exhausted.
If it hasn't in sequence, then it will reset back to the original string t.


Question 2

Time complexity: O(n^2)
Space complexity: 1

The function begins to find the palindrome by iterating through the length of the input string.  The function then utilizes a substring to work with.
If a palindrome isn't found, it takes another substring of the working string and works its way down until the substring length is 0 and resets to the next character.
I used this instead of pointers, because it took out the complication of finding even and odd strings.  Here the pointers are implicit with x as the 'start' and 'end' as the length of the substring.
This function has time complexity of n^2 since at each character, it has to compare with n length substring


Question 3

Time complexity: O(n^2)
Time complexity: n

This algorithm uses Prim's algorithm.  In the function it has a storage of visited vertices and randomly selects one vertex to kick off the process.
In each vertex, the edges connected to that vertex are inspected and the lowest weighted edge is stored and selected as the next vertex to visit.
The visited matrix is again iterated upon until all vertices have been visited.

This is is O(n^2) complexity because each vertex has to compare and look up against each vertex to see if the edge weight is minimum and has been visited.


Q
